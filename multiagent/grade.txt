Starting on 10-31 at 14:57:52

Question q1
===========

Pacman emerges victorious! Score: 1219
Pacman emerges victorious! Score: 1427
Pacman emerges victorious! Score: 1404
Pacman emerges victorious! Score: 1221
Pacman emerges victorious! Score: 1420
Pacman emerges victorious! Score: 1418
Pacman emerges victorious! Score: 1218
Pacman emerges victorious! Score: 1221
Pacman emerges victorious! Score: 1419
Pacman emerges victorious! Score: 1422
Average Score: 1338.9
Scores:        1219.0, 1427.0, 1404.0, 1221.0, 1420.0, 1418.0, 1218.0, 1221.0, 1419.0, 1422.0
Win Rate:      10/10 (1.00)
Record:        Win, Win, Win, Win, Win, Win, Win, Win, Win, Win
*** PASS: test_cases\q1\grade-agent.test (4 of 4 points)
***     1338.9 average score (2 of 2 points)
***         Grading scheme:
***          < 500:  0 points
***         >= 500:  1 points
***         >= 1000:  2 points
***     10 games not timed out (0 of 0 points)
***         Grading scheme:
***          < 10:  fail
***         >= 10:  0 points
***     10 wins (2 of 2 points)
***         Grading scheme:
***          < 1:  fail
***         >= 1:  0 points
***         >= 5:  1 points
***         >= 10:  2 points

### Question q1: 4/4 ###


Question q2
===========

*** FAIL: test_cases\q2\0-lecture-6-tree.test
***     Incorrect move for depth=2
***         Student move: Right
***         Optimal move: Center
***     Tree:
***                max
***           /-/   |   \--\
***          /      |       \
***         /       |        \
***      min1      min2      min3
***       /|\      /|\       /|\ 
***      / | \    / | \     / | \
***     A  B  C  D  E  F   G  H  I  
***     3 12  8  5  4  6  14  1  11
*** FAIL: test_cases\q2\0-small-tree.test
***     Incorrect move for depth=3
***         Student move: pacRight
***         Optimal move: pacLeft
***     Tree:
***             root
***            /    \
***      minLeft  minRight
***       / \       /    \
***      A   B     C   deeper
***      4   3     2     |
***                      D
***                    1000
*** PASS: test_cases\q2\1-1-minmax.test
*** PASS: test_cases\q2\1-2-minmax.test
*** PASS: test_cases\q2\1-3-minmax.test
*** FAIL: test_cases\q2\1-4-minmax.test
***     Incorrect move for depth=3
***         Student move: Left
***         Optimal move: Right
***     Tree:
***                 /-----a------\
***                /              \
***               /                \
***             b1                  b2
***              |                /    \
***             cx             c3        c4
***              |            /   \     /   \
***             dx           d5   d6   d7   d8
***            3.99          4    -7   0    5
***     
***     a - max
***     b - min
***     c - max
***     
***     Note that the minimax value of b2 is 4.
*** PASS: test_cases\q2\1-5-minmax.test
*** PASS: test_cases\q2\1-6-minmax.test
*** PASS: test_cases\q2\1-7-minmax.test
*** PASS: test_cases\q2\1-8-minmax.test
*** FAIL: Exception raised: getScore() called on non-terminal state or before maximum depth achieved.
*** 
*** Traceback (most recent call last):
***   File "D:\Program\AIML_HW2\multiagent\grading.py", line 75, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function
***   File "D:\Program\AIML_HW2\multiagent\util.py", line 618, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 295, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "D:\Program\AIML_HW2\multiagent\testClasses.py", line 57, in execute
***     if not f(grades):
***   File "autograder.py", line 290, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "multiagentTestClasses.py", line 397, in execute
***     action, generated = self.solveProblem(multiAgents)
***   File "multiagentTestClasses.py", line 384, in solveProblem
***     action = studentAgent.getAction(self.problem.startState)
***   File "multiAgents.py", line 313, in getAction
***     scoreDepths = map(lambda successorState: self.minimax(successorState, nextDepth, nextAgentIndex), successorStates)
***   File "multiAgents.py", line 313, in <lambda>
***     scoreDepths = map(lambda successorState: self.minimax(successorState, nextDepth, nextAgentIndex), successorStates)
***   File "multiAgents.py", line 274, in minimax
***     score = self.evaluationFunction(gameState)
***   File "multiAgents.py", line 183, in scoreEvaluationFunction
***     return currentGameState.getScore()
***   File "multiagentTestClasses.py", line 56, in getScore
***     raise Exception('getScore() called on non-terminal state or before maximum depth achieved.')
*** Exception: getScore() called on non-terminal state or before maximum depth achieved.
*** 

### Question q2: 0/5 ###


Question q3
===========

*** FAIL: test_cases\q3\0-lecture-6-tree.test
***     Incorrect move for depth=2
***         Student move: Right
***         Optimal move: Center
***     Incorrect generated nodes for depth=2
***         Student generated nodes: A B C D E F G H I max min1 min2 min3
***         Correct generated nodes: A B C D E F G H max min1 min2 min3
***     Tree:
***                max
***           /-/   |   \--\
***          /      |       \
***         /       |        \
***      min1      min2      min3
***       /|\      /|\       /|\ 
***      / | \    / | \     / | \
***     A  B  C  D  E  F   G  H  I  
***     3 12  8  5  4  6  14  1  11
*** FAIL: test_cases\q3\0-small-tree.test
***     Incorrect generated nodes for depth=3
***         Student generated nodes: A B C D deeper minLeft minRight root
***         Correct generated nodes: A B C minLeft minRight root
***     Tree:
***             root
***            /    \
***      minLeft  minRight
***       / \       /    \
***      A   B     C   deeper
***      4   3     2     |
***                      D
***                    1000
*** FAIL: test_cases\q3\1-1-minmax.test
***     Incorrect move for depth=3
***         Student move: Right
***         Optimal move: Left
***     Incorrect generated nodes for depth=3
***         Student generated nodes: a b1 b2 c1 c2 cx d1 d3 dx
***         Correct generated nodes: a b1 b2 c1 c2 cx d1 d2 d3 dx
***     Tree:
***                 /-----a------\
***                /              \
***               /                \
***             b1                  b2
***           /    \                 |
***        c1        c2             cx
***       /  \      /  \             |
***      d1   d2  d3   d4           dx
***     -3    -9  10    6         -3.01
***     
***     a - max
***     b - min
***     c - max
***     
***     Note that the minimax value of b1 is -3.
*** FAIL: test_cases\q3\1-2-minmax.test
***     Incorrect generated nodes for depth=3
***         Student generated nodes: a b1 b2 c1 c2 cx d1 d3 dx
***         Correct generated nodes: a b1 b2 c1 c2 cx d1 d2 d3 dx
***     Tree:
***                 /-----a------\
***                /              \
***               /                \
***             b1                  b2
***           /    \                 |
***        c1        c2             cx
***       /  \      /  \             |
***      d1   d2  d3   d4           dx
***     -3    -9  10    6         -2.99
***     
***     a - max
***     b - min
***     c - max
***     
***     Note that the minimax value of b1 is -3.
*** FAIL: test_cases\q3\1-3-minmax.test
***     Incorrect generated nodes for depth=3
***         Student generated nodes: a b1 b2 c3 c4 cx d5 d7 dx
***         Correct generated nodes: a b1 b2 c3 cx d5 d6 dx
***     Tree:
***                 /-----a------\
***                /              \
***               /                \
***             b1                  b2
***              |                /    \
***             cx             c3        c4
***              |            /   \     /   \
***             dx           d5   d6   d7   d8
***            4.01          4    -7   0    5
***     
***     a - max
***     b - min
***     c - max
***     
***     Note that the minimax value of b2 is 4.
*** FAIL: test_cases\q3\1-4-minmax.test
***     Incorrect move for depth=3
***         Student move: Left
***         Optimal move: Right
***     Incorrect generated nodes for depth=3
***         Student generated nodes: a b1 b2 c3 c4 cx d5 d7 dx
***         Correct generated nodes: a b1 b2 c3 c4 cx d5 d6 d7 d8 dx
***     Tree:
***                 /-----a------\
***                /              \
***               /                \
***             b1                  b2
***              |                /    \
***             cx             c3        c4
***              |            /   \     /   \
***             dx           d5   d6   d7   d8
***            3.99          4    -7   0    5
***     
***     a - max
***     b - min
***     c - max
***     
***     Note that the minimax value of b2 is 4.
*** FAIL: test_cases\q3\1-5-minmax.test
***     Incorrect generated nodes for depth=4
***         Student generated nodes: A B E F Z a b1 b2 c1 c2 cx d1 d3 dx
***         Correct generated nodes: A B C D E F G Z a b1 b2 c1 c2 cx d1 d2 d3 d4 dx
***     Tree:
***                  /-----a------\
***                 /              \
***                /                \
***              b1                  b2
***            /    \                |
***         c1        c2             cx
***        /  \      /  \            |
***       d1   d2  d3   d4           dx
***      / \  / \  / \  / \          |
***      A B  C D  E F  G H          Z
***     -3 13 5 9 10 3 -6 8        3.01
***     
***     a - max
***     b - min
***     c - max
***     d - min
***     
***     Note the minimax value of b1 is 3.
*** FAIL: test_cases\q3\1-6-minmax.test
***     Incorrect move for depth=4
***         Student move: Right
***         Optimal move: Left
***     Incorrect generated nodes for depth=4
***         Student generated nodes: A B E F Z a b1 b2 c1 c2 cx d1 d3 dx
***         Correct generated nodes: A B C D E F G Z a b1 b2 c1 c2 cx d1 d2 d3 d4 dx
***     Tree:
***                  /-----a------\
***                 /              \
***                /                \
***              b1                  b2
***            /    \                |
***         c1        c2             cx
***        /  \      /  \            |
***       d1   d2  d3   d4           dx
***      / \  / \  / \  / \          |
***      A B  C D  E F  G H          Z
***     -3 13 5 9 10 3 -6 8        2.99
***     
***     a - max
***     b - min
***     c - max
***     d - min
***     
***     Note the minimax value of b1 is 3.
*** FAIL: test_cases\q3\1-7-minmax.test
***     Incorrect generated nodes for depth=4
***         Student generated nodes: I K M O Z a b1 b2 c3 c4 cx d5 d6 d7 d8 dx
***         Correct generated nodes: I J K M O P Z a b1 b2 c3 c4 cx d5 d6 d7 d8 dx
***     Tree:
***                 /-----a------\
***                /              \
***               /                \
***             b1                  b2
***             |                 /    \
***             cx             c3        c4
***             |             /   \     /   \
***             dx           d5   d6   d7   d8
***             |           / \  / \  / \  / \ 
***             Z           I J  K L  M N  O P
***          -1.99        -1 -9  4 7  2 5 -3 -2
***     
***     a - max
***     b - min
***     c - min
***     d - max
***     
***     Note that the minimax value of b2 is -2
*** FAIL: test_cases\q3\1-8-minmax.test
***     Incorrect move for depth=4
***         Student move: Left
***         Optimal move: Right
***     Incorrect generated nodes for depth=4
***         Student generated nodes: I K M O Z a b1 b2 c3 c4 cx d5 d6 d7 d8 dx
***         Correct generated nodes: I J K M O P Z a b1 b2 c3 c4 cx d5 d6 d7 d8 dx
***     Tree:
***                 /-----a------\
***                /              \
***               /                \
***             b1                  b2
***             |                 /    \
***             cx             c3        c4
***             |             /   \     /   \
***             dx           d5   d6   d7   d8 
***             |           / \  / \  / \  / \ 
***             Z           I J  K L  M N  O P
***          -2.01        -1 -9  4 7  2 5 -3 -2
***     
***     a - max
***     b - min
***     c - min
***     d - max
***     
***     Note that the minimax value of b2 is -2.01
*** FAIL: Exception raised: getScore() called on non-terminal state or before maximum depth achieved.
*** 
*** Traceback (most recent call last):
***   File "D:\Program\AIML_HW2\multiagent\grading.py", line 75, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function
***   File "D:\Program\AIML_HW2\multiagent\util.py", line 618, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 295, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "D:\Program\AIML_HW2\multiagent\testClasses.py", line 57, in execute
***     if not f(grades):
***   File "autograder.py", line 290, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "multiagentTestClasses.py", line 397, in execute
***     action, generated = self.solveProblem(multiAgents)
***   File "multiagentTestClasses.py", line 384, in solveProblem
***     action = studentAgent.getAction(self.problem.startState)
***   File "multiAgents.py", line 393, in getAction
***     scoreDepths = map(lambda successorState: self.alphabeta(successorState, nextDepth, nextAgentIndex, float("-inf"), float("inf")), successorStates)
***   File "multiAgents.py", line 393, in <lambda>
***     scoreDepths = map(lambda successorState: self.alphabeta(successorState, nextDepth, nextAgentIndex, float("-inf"), float("inf")), successorStates)
***   File "multiAgents.py", line 341, in alphabeta
***     score = self.evaluationFunction(gameState)
***   File "multiAgents.py", line 183, in scoreEvaluationFunction
***     return currentGameState.getScore()
***   File "multiagentTestClasses.py", line 56, in getScore
***     raise Exception('getScore() called on non-terminal state or before maximum depth achieved.')
*** Exception: getScore() called on non-terminal state or before maximum depth achieved.
*** 

### Question q3: 0/5 ###


Question q4
===========

*** PASS: test_cases\q4\0-expectimax1.test
*** PASS: test_cases\q4\1-expectimax2.test
*** PASS: test_cases\q4\2-one-ghost-3level.test
*** FAIL: test_cases\q4\3-one-ghost-4level.test
***     Incorrect move for depth=4
***         Student move: Left
***         Optimal move: Right
***     Tree:
***                 /-----a------\
***                /              \
***               /                \
***             b1                  b2
***           /    \              /     \
***        c1        c2        c3        c4
***       /  \      /  \      /   \     /   \
***      d1   d2  d3   d4    d5   d6   d7   d8
***     / \  / \  / \  / \   / \  / \  / \  / \ 
***     A B  C D  E F  G H   I J  K L  M N  O P
***     3 13 5 9 10 11 6 8   1 0  4 7 12 15 2 14
***     
***     a - max
***     b - exp
***     c - max
***     d - exp
*** PASS: test_cases\q4\4-two-ghosts-3level.test
*** PASS: test_cases\q4\5-two-ghosts-4level.test
*** FAIL: test_cases\q4\6-1a-check-depth-one-ghost.test
***     Incorrect move for depth=1
***         Student move: Right
***         Optimal move: Left
***     Incorrect generated nodes for depth=1
***         Student generated nodes: a b1 b2 b3
***         Correct generated nodes: a b1 b2 b3 c1 c2 c3
***     Tree:
***                 a
***           /-/   |   \--\
***          /      |       \
***       0 b1    0 b2      b3 8
***         |       |        |
***      10 c1    0 c2      c3 8
***         |       |        |
***       0 d1    0 d2      d3 8
***         |       |        |
***       0 e1   10 e2      e3 8
***         |       |        |
***       0 f1    0 f2      f3 8
***         |       |        |
***         g1      g2      g3
***         0       0        8
***     
***     a - max
***     b - min
***     c - max
***     d - min
***     e - max
***     f - min
***     
***     At depth 1, the evaluation function is called at level c,
***     so Left should be returned. If your algorithm is returning a
***     different action, check how you implemented your depth.
*** FAIL: test_cases\q4\6-1b-check-depth-one-ghost.test
***     Incorrect move for depth=2
***         Student move: Right
***         Optimal move: Center
***     Incorrect generated nodes for depth=2
***         Student generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3
***         Correct generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3
***     Tree:
***                 a
***           /-/   |   \--\
***          /      |       \
***       0 b1    0 b2      b3 8
***         |       |        |
***      10 c1    0 c2      c3 8
***         |       |        |
***       0 d1    0 d2      d3 8
***         |       |        |
***       0 e1   10 e2      e3 8
***         |       |        |
***       0 f1    0 f2      f3 8
***         |       |        |
***         g1      g2      g3
***         0       0        8
***     
***     a - max
***     b - min
***     c - max
***     d - min
***     e - max
***     f - min
***     
***     At depth 2, the evaluation function is called at level e,
***     so Center should be returned. If your algorithm is returning a
***     different action, check how you implemented your depth.
*** FAIL: test_cases\q4\6-1c-check-depth-one-ghost.test
***     Incorrect generated nodes for depth=3
***         Student generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3 f1 f2 f3
***         Correct generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3 f1 f2 f3 g1 g2 g3
***     Tree:
***                 a
***           /-/   |   \--\
***          /      |       \
***       0 b1    0 b2      b3 8
***         |       |        |
***      10 c1    0 c2      c3 8
***         |       |        |
***       0 d1    0 d2      d3 8
***         |       |        |
***       0 e1   10 e2      e3 8
***         |       |        |
***       0 f1    0 f2      f3 8
***         |       |        |
***         g1      g2      g3
***         0       0        8
***     
***     a - max
***     b - min
***     c - max
***     d - min
***     e - max
***     f - min
***     
***     At depth 3, the evaluation function is called at level g,
***     so Right should be returned. If your algorithm is returning a
***     different action, check how you implemented your depth.
*** FAIL: test_cases\q4\6-2a-check-depth-two-ghosts.test
***     Incorrect move for depth=1
***         Student move: Right
***         Optimal move: Left
***     Incorrect generated nodes for depth=1
***         Student generated nodes: a b1 b2 b3 c1 c2 c3
***         Correct generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3
***     Tree:
***                 a
***           /-/   |   \--\
***          /      |       \
***       0 b1    0 b2      b3 8
***         |       |        |
***       0 c1    0 c2      c3 8
***         |       |        |
***      10 d1    0 d2      d3 8
***         |       |        |
***       0 e1    0 e2      e3 8
***         |       |        |
***       0 f1    0 f2      f3 8
***         |       |        |
***       0 g1   10 g2      g3 8
***         |       |        |
***       0 h1    0 h2      h3 8
***         |       |        |
***       0 i1    0 i2      i3 8
***         |       |        |
***         j1      j2      j3
***         0       0        8
***     
***     a - max
***     b - min
***     c - min
***     d - max
***     e - min
***     f - min
***     g - max
***     h - min
***     i - min
***     
***     At depth 1, the evaluation function is called at level d,
***     so Left should be returned. If your algorithm is returning a
***     different action, check how you implemented your depth.
*** FAIL: test_cases\q4\6-2b-check-depth-two-ghosts.test
***     Incorrect move for depth=2
***         Student move: Right
***         Optimal move: Center
***     Incorrect generated nodes for depth=2
***         Student generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3 f1 f2 f3
***         Correct generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3 f1 f2 f3 g1 g2 g3
***     Tree:
***                 a
***           /-/   |   \--\
***          /      |       \
***       0 b1    0 b2      b3 8
***         |       |        |
***       0 c1    0 c2      c3 8
***         |       |        |
***      10 d1    0 d2      d3 8
***         |       |        |
***       0 e1    0 e2      e3 8
***         |       |        |
***       0 f1    0 f2      f3 8
***         |       |        |
***       0 g1   10 g2      g3 8
***         |       |        |
***       0 h1    0 h2      h3 8
***         |       |        |
***       0 i1    0 i2      i3 8
***         |       |        |
***         j1      j2      j3
***         0       0        8
***     
***     a - max
***     b - min
***     c - min
***     d - max
***     e - min
***     f - min
***     g - max
***     h - min
***     i - min
***     
***     At depth 2, the evaluation function is called at level g,
***     so Center should be returned. If your algorithm is returning
***     a different action, check how you implemented your depth.
*** FAIL: test_cases\q4\6-2c-check-depth-two-ghosts.test
***     Incorrect generated nodes for depth=3
***         Student generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3 f1 f2 f3 g1 g2 g3 h1 h2 h3 i1 i2 i3
***         Correct generated nodes: a b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3 f1 f2 f3 g1 g2 g3 h1 h2 h3 i1 i2 i3 j1 j2 j3
***     Tree:
***                 a
***           /-/   |   \--\
***          /      |       \
***       0 b1    0 b2      b3 8
***         |       |        |
***       0 c1    0 c2      c3 8
***         |       |        |
***      10 d1    0 d2      d3 8
***         |       |        |
***       0 e1    0 e2      e3 8
***         |       |        |
***       0 f1    0 f2      f3 8
***         |       |        |
***       0 g1   10 g2      g3 8
***         |       |        |
***       0 h1    0 h2      h3 8
***         |       |        |
***       0 i1    0 i2      i3 8
***         |       |        |
***         j1      j2      j3
***         0       0        8
***     
***     a - max
***     b - min
***     c - min
***     d - max
***     e - min
***     f - min
***     g - max
***     h - min
***     i - min
***     
***     At depth 3, the evaluation function is called at level j,
***     so Right should be returned. If your algorithm is returning
***     a different action, check how you implemented your depth.
*** Running ExpectimaxAgent on smallClassic 1 time(s).
Pacman died! Score: 84
Average Score: 84.0
Scores:        84.0
Win Rate:      0/1 (0.00)
Record:        Loss
*** Finished running ExpectimaxAgent on smallClassic after 1 seconds.
*** Won 0 out of 1 games. Average score: 84.000000 ***
*** FAIL: test_cases\q4\7-pacman-game.test
***     Bug: Wrong number of states expanded.
*** Tests failed.

### Question q4: 0/5 ###


Question q5
===========

Pacman died! Score: -85
Pacman emerges victorious! Score: 921
Pacman emerges victorious! Score: 979
Pacman died! Score: -234
Pacman emerges victorious! Score: 1160
Pacman emerges victorious! Score: 1153
Pacman emerges victorious! Score: 1154
Pacman died! Score: -299
Pacman emerges victorious! Score: 973
Pacman emerges victorious! Score: 1155
Average Score: 687.7
Scores:        -85.0, 921.0, 979.0, -234.0, 1160.0, 1153.0, 1154.0, -299.0, 973.0, 1155.0
Win Rate:      7/10 (0.70)
Record:        Loss, Win, Win, Loss, Win, Win, Win, Loss, Win, Win
*** FAIL: test_cases\q5\grade-agent.test (4 of 6 points)
***     687.7 average score (1 of 2 points)
***         Grading scheme:
***          < 500:  0 points
***         >= 500:  1 points
***         >= 1000:  2 points
***     10 games not timed out (1 of 1 points)
***         Grading scheme:
***          < 0:  fail
***         >= 0:  0 points
***         >= 10:  1 points
***     7 wins (2 of 3 points)
***         Grading scheme:
***          < 1:  fail
***         >= 1:  1 points
***         >= 5:  2 points
***         >= 10:  3 points

### Question q5: 4/6 ###


Finished at 14:58:02

Provisional grades
==================
Question q1: 4/4
Question q2: 0/5
Question q3: 0/5
Question q4: 0/5
Question q5: 4/6
------------------
Total: 8/25

Your grades are NOT yet registered.  To register your grades, make sure
to follow your instructor's guidelines to receive credit on your project.

